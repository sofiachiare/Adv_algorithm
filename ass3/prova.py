import math

import os
import matplotlib.pyplot as plt


import tabulate



weights = [3056, 223, 2302, 4974, 1526, 1684, 522, 2866, 2137, 1446, 648, 2486, 1282, 299, 2113, 159, 969, 1756, 714, 2610, 341, 890, 772, 1561, 951, 424, 1153, 707, 484, 850, 1382, 1102, 346, 381, 129, 670, 1137, 869, 868, 1148, 676, 290, 818, 175, 508, 904, 362, 509, 400, 364, 336, 639, 43, 805, 363, 584]

measured_time = [0.002878162, 0.002237257, 0.0025849327999999997, 0.0024465777999999995, 0.015584608, 0.012480706500000001, 0.012428901624999999, 0.012325466125, 0.0900625903846154, 0.07807750284615385, 0.07943827953846154, 0.07858850469230769, 0.2934383864999999, 0.3148072098750001, 0.29753018400000003, 0.31075079268750005, 0.4273651721052632, 0.4106234536315789, 0.41344211326315783, 0.4123000716842105, 0.9322611162857141, 0.9344375093333332, 0.9298772697142855, 0.931359902857143, 2.5538942018, 2.5983983243199997, 2.7229188612399997, 2.750532669559999, 6.901979064928573, 6.706517400785715, 7.293497010499999, 6.80734821125, 14.4230902687, 15.076100328033338, 14.4429063295, 14.106900019133333, 19.74317286729032, 19.957396395, 20.4157540122, 19.719722734903232, 39.74898080843751, 40.5490989268, 41.78260376320001, 43.4013169185, 55.33539248545455, 54.816341673000004, 52.412706564916654, 54.05118935341667, 100.89546819733334, 89.68867986442856, 89.839219986, 89.39005480542858, 112.40905220316667, 112.57269020333335, 117.98371535583334, 126.6553737016]

complexity= [1220.8071553760863, 1220.8071553760863, 1220.8071553760863, 1220.8071553760863, 10753.97409185149, 10753.97409185149, 10753.97409185149, 10753.97409185149, 80316.24080611655, 80316.24080611655, 80316.24080611655, 80316.24080611655, 247090.2821815953, 247090.2821815953, 247090.2821815953, 247090.2821815953, 538523.9378449713, 538523.9378449713, 538523.9378449713, 538523.9378449713, 976645.7243008689, 976645.7243008689, 976645.7243008689, 976645.7243008689, 2830485.260303538, 2830485.260303538, 2830485.260303538, 2830485.260303538, 5949409.979647954, 5949409.979647954, 5949409.979647954, 5949409.979647954, 10520636.725106295, 10520636.725106295, 10520636.725106295, 10520636.725106295, 16700573.02594631, 16700573.02594631, 16700573.02594631, 16700573.02594631, 24624607.875311643, 24624607.875311643, 24624607.875311643, 24624607.875311643, 34412717.09392477, 34412717.09392477, 34412717.09392477, 34412717.09392477, 46173011.86963995, 46173011.86963995, 46173011.86963995, 46173011.86963995, 60004144.55074993, 60004144.55074993, 60004144.55074993, 60004144.55074993]

discovery_time= [0.002901081, 0.002558202, 0.001986938, 0.002452849, 0.013882808, 0.014471372, 0.014021813, 0.013103642, 0.07029658, 0.069979538, 0.078976073, 0.072177065, 0.274731705, 0.288146782, 0.282997881, 0.281487344, 0.421149624, 0.414898194, 0.415655219, 0.417966172, 0.937634691, 0.94805001, 0.940178314, 0.941706035, 2.597990284, 2.557863969, 2.575814413, 2.933757895, 6.833436376, 8.138465373, 6.505580966, 6.800053995, 14.056934436, 14.192803306, 14.831527489, 14.050986431, 18.5591661, 19.835683577, 20.503390414, 20.536130976, 40.087577977, 39.627189276, 40.243950905, 45.191413766, 54.902957956, 58.679404092, 52.061417898, 58.035333253, 98.658634482, 89.226096974, 89.272222698, 89.377506042, 112.270112085, 112.470097137, 113.95187168, 126.888344431]

Totoal_time=[0.01439081, 0.011186284999999999, 0.012924663999999999, 0.012232888999999999, 0.124676864, 0.09984565200000001, 0.09943121299999999, 0.098603729, 1.1708136750000002, 1.015007537, 1.032697634, 1.021650561, 4.695014183999999, 5.036915358000002, 4.7604829440000005, 4.972012683000001, 8.11993827, 7.801845619, 7.855400151999999, 7.833701361999999, 19.577483441999995, 19.623187696, 19.527422663999996, 19.55855796, 63.847355045, 64.959958108, 68.072971531, 68.76331673899998, 193.25541381800002, 187.78248722200001, 204.217916294, 190.605749915, 432.69270806099996, 452.28300984100014, 433.287189885, 423.207000574, 612.0383588859999, 618.679288245, 612.472620366, 611.3114047820002, 635.9836929350001, 608.236483902, 626.7390564480002, 607.618436859, 608.68931734, 602.979758403, 628.9524787789999, 648.614272241, 605.3728091840001, 627.820759051, 628.874539902, 625.730383638, 674.454313219, 675.4361412200001, 707.902292135, 633.276868508]

dimensions = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 40, 40, 60, 60, 60, 60, 80, 80, 80, 80, 100, 100, 100, 100, 150, 150, 150, 150, 200, 200, 200, 200, 250, 250, 250, 250, 300, 300, 300, 300, 350, 350, 350, 350, 400, 400, 400, 400, 450, 450, 450, 450, 500, 500, 500, 500]

def plotResult(valone, vertices):
    # sort the keys (number of vertices) of the dictionary and plot them
    plt.plot(vertices, valone, 'k')
    #plt.plot(vertices, valtwo, 'r')
    plt.legend([ "Average Measured Time"])
    #plt.yscale("log")
    # x-axis label
    plt.xlabel('Number of Vertices')
    # frequency label
    plt.ylabel('Execution Time')
    # plot title
    plt.title('Karger Algorithm plot average time')
    # function to show the plot
    plt.show()

c = []
for n in dimensions:
    c.append((n**2)*(math.log(n)))

#plotResult(measured_time , c, dimensions)
print(sum(Totoal_time))
#plotResult(measured_time, dimensions)
directory = "/Users/sofiachiarello/Desktop/unipd/advanced algorthm/Adv_algorithm/ass3/dataset"
files = os.listdir(directory)
    
files = sorted(files)
zipFileSizeSol = zip(files, dimensions, weights, measured_time, Totoal_time) 
tableRunOutput = tabulate.tabulate(zipFileSizeSol, headers=['File',  'N', 'Solution' ,'AvgTime', 'Total Time'], tablefmt='orgtbl')
print(tableRunOutput)